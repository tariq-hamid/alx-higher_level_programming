Testing the usage of `matrix_divided`
-------------------------------------

This is a test unit file for 'matrix_divided(matrix, div)' from '../2-matrix_divided.py'
Prototype: def matrix_divided(matrix, div):

First import the function

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Can be used as:

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 3))
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

matrix must be a list of lists of integers or floats:

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, "yes", 5]
	... ]
	>>> print(matrix_divided(matrix, 2))
	Traceback (most recent call last):
			...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size:

	>>> matrix = [
	...     [4, 5, 6],
	...     [1, 2, 3, 9]
	... ]
	>>> print(matrix_divided(matrix, 4))
	Traceback (most recent call last):
			...
	TypeError: Each row of the matrix must have the same size

div must be a number (integer or float):

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, "sth"))
	Traceback (most recent call last):
			...
	TypeError: div must be a number

div canâ€™t be equal to 0:

	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, 0))
	Traceback (most recent call last):
			...
	TypeError: division by zero

Also:
	
	>>> matrix = [
	...     [1, 2, 3],
	...     [4, 5, 6]
	... ]
	>>> print(matrix_divided(matrix, float("nan")))
	[[nan, nan, nan], [nan, nan, nan]]
	>>> print(matrix_divided(matrix, float("inf")))
	[[0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
